{{#operations}}

api.load("{{baseName}}", "{{invokerPackage}}", function(ns) {
    //This is just so code-completion works.  Unfortunatly, there's a paradox here - the only way to get completion to
    //really work is to statically declare the namespace here and where it's used.  But the reality is that if other calls
    //access the namespace directly, we won't be able to change it later anyway.  So, we add indirection, which gives us
    //better separation of our javascript libraries, but renders a typed SDK useless.

    //Here we are seemingly breaking the purpose of passing in the ns variable by hardcoding it.  This is a conscious
    //decision so we can take advantage of code completion.  Plus, we do know the structure of the API, so there's less
    //benefit for trying to be fancy with it's loading.
    ns = api.{{invokerPackage}};

    ns.{{baseName}}Service = {};
{{#operation}}{{newline}}
    ns.{{baseName}}Service.{{nickname}} = function({{#allParams}} {{paramName}}, {{/allParams}} successFn, failureFn)  {
        //Stub implementation goes here
    };
{{/operation}}

});

{{/operations}}
